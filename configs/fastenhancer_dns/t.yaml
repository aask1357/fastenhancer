model: "fastenhancer.default"
model_kwargs:
    channels: 24
    kernel_size: [8, 3, 3]
    stride: 4
    rnnformer_kwargs:
        num_blocks: 2
        channels: 20
        freq: 16
        num_heads: 4
        eps: 1.0e-5
        positional_embedding: train # null | "fixed" | "train"
        attn_bias: False
        post_act: False
        pre_norm: False
    pre_post_init: "linear_fixed"
    n_fft: 512
    hop_size: 256
    win_size: 512
    window: hann
    stft_normalized: False
    mask: null
    activation: SiLU
    activation_kwargs:
        inplace: True
    input_compression: 0.3
    normalize_final_conv: True
    weight_norm: True
    resnet: False
wrapper: ns_on_the_fly
data:
    dataset:
        train: NoiseSuppressionOnTheFly
        valid: NoiseSuppression
        infer: NoiseSuppression
        pesq: NoiseSuppression
    train:
        clean_dir: /home/shahn/Datasets/DNS-Challenge/16khz/clean
        noise_dir: /home/shahn/Datasets/DNS-Challenge/16khz/noise
        segment_size: 32000
        length: 16384       # len(dataset)
    valid:
        clean_dir: "/home/shahn/Datasets/DNS-Challenge/16khz/testset_synthetic_interspeech2020/no_reverb/clean"
        noisy_dir: "/home/shahn/Datasets/DNS-Challenge/16khz/testset_synthetic_interspeech2020/no_reverb/noisy"
        segment_size: 32000
    infer:
        clean_dir: "/home/shahn/Datasets/DNS-Challenge/16khz/testset_synthetic_interspeech2020/no_reverb/clean"
        noisy_dir: "/home/shahn/Datasets/DNS-Challenge/16khz/testset_synthetic_interspeech2020/no_reverb/noisy"
        files:
            - "002"     # SNR 17, washer noise
            - "066"     # SNR 11, air conditioner noise
            - "063"     # SNR 6, bird noise
            - "053"     # SNR 1, water noise
    pesq:
        clean_dir: "/home/shahn/Datasets/DNS-Challenge/16khz/testset_synthetic_interspeech2020/no_reverb/clean"
        noisy_dir: "/home/shahn/Datasets/DNS-Challenge/16khz/testset_synthetic_interspeech2020/no_reverb/noisy"
        segment_size: null
    sampling_rate: 16000
    reverb_prob: 0.0
    silence_length: 0.0     # Seconds -> Add silence between clean speech segments
    snr_mixer:
        segmental_snr: True
        rms_window_size: 0.1        # Seconds -> Window size for calculating rms
        activity_threshold: -40     # dB -> Threshold for calculating active part
        dataloader_rms: -20         # dB -> Dataloader will generate clean and noise with this rms
        snr_range: [-5, 20]         # dB
        noisy_rms_range: [-25, -10] # dB -> Range of the final noisy speech's rms
        clean_activity_threshold: 0.3   # Ratio of active part.
                                        # If active part of a clean speech is 
                                        # less than `clean_activity_threshold`,
                                        # we'll load another clean file.
        noise_activity_threshold: 0.0   # Ratio of active part.
                                        # If active part of a noise is 
                                        # less than `noise_activity_threshold`,
                                        # we'll load another noise file.
train:
    test: False
    batch_size: 64
    print_interval: 1
    max_epochs: 500
    save_interval: 20
    fp16: True
    num_workers: 8
    persistent_workers: True
    clip_grad: null
    seed: 1
    plot_param_and_grad: False
    losses:
        mag_mse:
            weight: 0.3
        complex_mse:
            weight: 0.2
        consistency:
            weight: 0.3
            compression: 0.3
        wav_l1:
            weight: 0.2
        # pesq:
        #     weight: 1.0e-3
    optimizer: "AdamP"
    optimizer_kwargs:
        lr: 2.0e-3
        weight_decay: 0.01  # normal weights -> 1e-2
        wd_ratio: 1.0       # scale-invariant weights -> 1e-2
        betas: [0.95, 0.999]
        projection: auto
    optimizer_groups:
        -
            regex_list:     # regular expressions of parameter names
                - "rf_block\\.\\d\\.rnn\\.parametrizations.+original0$" # GRU weight_g
                - "dec_post\\.3\\.scale"            # scale
            weight_decay: 0       # optimizer_kwargs to update
            projection: disabled
        -
            regex_list:
                - ".+parametrizations.+original1$"  # weight_v
                - "enc_pre\\.0\\.weight"            # conv1d before BN
                - "encoder\\.\\d\\.0\\.weight"      # conv1d before BN
                - "rf_(pre|post)\\.1\\.weight"      # conv1d before BN
                - "(rnn|attn)_fc\\.weight"          # conv1d before BN
                - "decoder\\.\\d\\.[03]\\.weight"   # conv1d before BN
                - "dec_post\\.0\\.weight"           # conv1d before BN
            projection: channelwise
        -
            regex_list:
                - "rf_(pre|post)\\.0\\.weight"      # `linear` -> conv1d -> BN
                - "dec_post\\.3\\.weight"           # final conv
            projection: layerwise
    scheduler: CosineAnnealingWarmup
    scheduler_kwargs:
        warmup_iterations: 500
        eta_min: 1.0e-6
        warn: False
valid:
    batch_size: 64
    num_workers: 2
infer:
    batch_size: 1
    interval: 20
    num_workers: 0
pesq:
    batch_size: 4
    num_workers: 0              # num_workers for a dataloader
    num_workers_executor: 8     # num_workers for a multiprocess executor
    interval: 20
    metrics_to_calculate:
        pesq: True
        stoi: True
